import pandas as pd
import ast
import os

# ———————— USER CONFIGURATION ————————
# 1) Replace this path with the path to your Excel or CSV file:
INPUT_PATH = "data/story_data.csv"


#    • If your data is already in CSV form, you can set:
#      INPUT_PATH = "all_summaries.csv"
#
# 2) The output TSX file name. Change if you like:
OUTPUT_PATH = "../rationtalk/src/assets/data/stories.tsx"
# ————————————————————————————————————

# 1) Load the sheet (supports both .xlsx and .csv based on extension)
ext = os.path.splitext(INPUT_PATH)[1].lower()
if ext in [".xlsx", ".xls"]:
    df = pd.read_excel(INPUT_PATH)
elif ext in [".csv"]:
    df = pd.read_csv(INPUT_PATH)
else:
    raise ValueError(f"Unsupported file extension: {ext!r}")

# 2) Normalize column names to strip whitespace
df.columns = [col.strip() for col in df.columns]
# 3) Identify question‐columns by prefix (case‐insensitive)
question_cols = [col for col in df.columns if col.lower().startswith("question")]

stories = []
for _, row in df.iterrows():
    print(f"Processing row {_ + 1} of {len(df)}...")
    # — Process Topic —
    topic = ""
    if "Topic" in df.columns:
        raw_topic = row["Topic"]
        if pd.notna(raw_topic):
            topic = str(raw_topic).strip()

    # — Process Title —
    title = ""
    if "Title" in df.columns:
        raw_title = row["Title"]
        if pd.notna(raw_title):
            title = str(raw_title).strip()
            # If your titles sometimes start with "### Title:", strip that prefix:
            title_split = title.split(" ")
            title_clean = " ".join(title_split[1:])
            title_clean_split = title_clean.split(" ")
            if title_clean_split[0] == 'Title:':
                title = " ".join(title_clean_split[1:]).replace("*", "")
            else:
                title = title_clean.replace("*", "")
            print(title)

    # — Process Image URL (column named “Image”) —
    image_url = ""
    if "Image" in df.columns:
        raw_img = row["Image"]
        if pd.notna(raw_img):
            image_url = str(raw_img).strip()

    # — Process Summary —
    summary_text = ""
    if "Summary" in df.columns:
        raw_summary = row["Summary"]
        if isinstance(raw_summary, str) and raw_summary.strip().startswith("["):
            # If summary is a Python‐list‐string like "['foo', 'bar']"
            try:
                summary_list = ast.literal_eval(raw_summary)
                # Join any nonempty strings
                summary_text = " ".join([s for s in summary_list if isinstance(s, str) and s.strip()])
            except Exception:
                summary_text = raw_summary.strip()
        elif pd.notna(raw_summary):
            summary_text = str(raw_summary).strip()

    # — Collect all non‐empty questions —
    questions = []
    for qc in question_cols:
        cell = row.get(qc)
        if pd.notna(cell):
            q_str = str(cell).strip()
            if q_str:
                questions.append(q_str)

    stories.append({
        "topic": topic,
        "title": title,
        "imageUrl": image_url,
        "summary": summary_text,
        "questions": questions,
    })


# 4) Write out the TSX file
with open(OUTPUT_PATH, "w", encoding="utf-8") as f:
    f.write("// This file was auto‐generated by excel_to_tsx.py\n")
    f.write("export interface StoryData {\n")
    f.write("  topic: string;\n")
    f.write("  imageUrl: string;\n")
    f.write("  title: string;\n")
    f.write("  summary: string;\n")
    f.write("  questions: string[];\n")
    f.write("}\n\n")

    f.write("export const storiestouse: StoryData[] = [\n")
    for s in stories:
        # Use repr(...) so that quotes and escape sequences are handled properly
        f.write("  {\n")
        f.write(f"    topic: {repr(s['topic'])},\n")
        f.write(f"    imageUrl: {repr(s['imageUrl'])},\n")
        f.write(f"    title: {repr(s['title'])},\n")
        f.write(f"    summary: {repr(s['summary'])},\n")
        f.write("    questions: [\n")
        for q in s["questions"]:
            f.write(f"      {repr(q)},\n")
        f.write("    ],\n")
        f.write("  },\n")
    f.write("];\n")
